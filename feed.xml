<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://malingaperera.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://malingaperera.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-11-05T06:01:36+00:00</updated><id>https://malingaperera.github.io/feed.xml</id><title type="html">Romesh Malinga Perera</title><subtitle>Human | Engineer | Researcher </subtitle><entry><title type="html">Updated 2022 Nov - Water Bill Calculator – Sri Lanka</title><link href="https://malingaperera.github.io/water-bill-calculator-sri-lanka/" rel="alternate" type="text/html" title="Updated 2022 Nov - Water Bill Calculator – Sri Lanka"/><published>2022-11-11T21:01:00+00:00</published><updated>2022-11-11T21:01:00+00:00</updated><id>https://malingaperera.github.io/water-bill-calculator-sri-lanka</id><content type="html" xml:base="https://malingaperera.github.io/water-bill-calculator-sri-lanka/"><![CDATA[<div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/water-bill-calculator-sri-lanka/water-bill-calculator-sri-lanka-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/water-bill-calculator-sri-lanka/water-bill-calculator-sri-lanka-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/water-bill-calculator-sri-lanka/water-bill-calculator-sri-lanka-1400.webp"/> <img src="/assets/img/water-bill-calculator-sri-lanka/water-bill-calculator-sri-lanka.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Most people got huge water bills after some time due to COVID-19. I wanted to double-check the calculation because the amount was somewhat big. Unlucky I didn’t find any online calculator that gets the job done (there was one in the waterboard, but it has a maximum limit of 60 days). So I went with the default option, Excel. I thought of sharing the excel workbook I used as It might be helpful to others. I really don’t know how the VAT calculation is done, so I used 15%. (Thanks to Madura for the suggested edit)</p> <p>Download the <a href="https://malingaperera.github.io/assets/pdf/water-bill-calculator-sri-lanka/Water-Bill-Calculator-8.xlsx">Water Bill Calculator</a></p> <p>These are the supporting document I used.</p> <p>Download <a href="https://malingaperera.github.io/assets/pdf/water-bill-calculator-sri-lanka/Water-Tariff-2294-51_English.pdf">Gazette for water tariff</a></p>]]></content><author><name></name></author><category term="other"/><category term="life"/><category term="other"/><summary type="html"><![CDATA[Updated 2022 Nov - Water Bill Calculator – Sri Lanka]]></summary></entry><entry><title type="html">VS Code Won’t Open After Unplanned Restart (Failed to deserialize the V8 snapshot blob)</title><link href="https://malingaperera.github.io/vs-code-wont-open-after-unplanned-restart-failed-to-deserialize-the-v8-snapshot-blob/" rel="alternate" type="text/html" title="VS Code Won’t Open After Unplanned Restart (Failed to deserialize the V8 snapshot blob)"/><published>2021-02-11T21:01:00+00:00</published><updated>2021-02-11T21:01:00+00:00</updated><id>https://malingaperera.github.io/vs-code-wont-open-after-unplanned-restart-failed-to-deserialize-the-v8-snapshot-blob</id><content type="html" xml:base="https://malingaperera.github.io/vs-code-wont-open-after-unplanned-restart-failed-to-deserialize-the-v8-snapshot-blob/"><![CDATA[<div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/vs_code_wont_open/vs_code_wont_open-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/vs_code_wont_open/vs_code_wont_open-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/vs_code_wont_open/vs_code_wont_open-1400.webp"/> <img src="/assets/img/vs_code_wont_open/vs_code_wont_open.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>The visual studio was running fine in my machine till an unplanned restart happened. Soon after restart VS didn’t open giving me the below error. I reinstalled the Visual Studio Code without uninstalling which fixed the issue. In addition, it started without any loss to previous plugins and open projects. Error</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Fatal error in , line 0
Failed to deserialize the V8 snapshot blob. This can mean that the snapshot blob file is corrupted or missing.
FailureMessage Object: 00000071D3DFF2C0
1: 00007FF60A57E91F node::Buffer::New+130911
2: 00007FF60A3F7CDA IsSandboxedProcess+1850986
3: 00007FF608E1D798 v8::Isolate::Initialize+744
4: 00007FF60A3FD1A0 uv_mutex_unlock+21184
5: 00007FF607A28793 std::__1::__vector_base &gt;::__end_cap+102515
6: 00007FF607AE56C8 v8::internal::JSMemberBase::JSMemberBase+54872
7: 00007FF6079513A0 Ordinal0+5024
8: 00007FF60D6FDB02 uv_random+18066594
9: 00007FFB77EF4034 BaseThreadInitThunk+20
10: 00007FFB781F3691 RtlUserThreadStart+33
</code></pre></div></div>]]></content><author><name></name></author><category term="programming"/><category term="coding"/><category term="programming"/><category term="tools"/><summary type="html"><![CDATA[VS Code Won’t Open After Unplanned Restart (Failed to deserialize the V8 snapshot blob)]]></summary></entry><entry><title type="html">NetworkX visualization with Graphviz (Example)</title><link href="https://malingaperera.github.io/networkx-visualization-with-graphviz-example/" rel="alternate" type="text/html" title="NetworkX visualization with Graphviz (Example)"/><published>2020-07-19T21:01:00+00:00</published><updated>2020-07-19T21:01:00+00:00</updated><id>https://malingaperera.github.io/networkx-visualization-with-graphviz-example</id><content type="html" xml:base="https://malingaperera.github.io/networkx-visualization-with-graphviz-example/"><![CDATA[<div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/networkx-visualization-with-graphviz-example/NetworkX_visualization_with_Graphviz_Example_thumb-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/networkx-visualization-with-graphviz-example/NetworkX_visualization_with_Graphviz_Example_thumb-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/networkx-visualization-with-graphviz-example/NetworkX_visualization_with_Graphviz_Example_thumb-1400.webp"/> <img src="/assets/img/networkx-visualization-with-graphviz-example/NetworkX_visualization_with_Graphviz_Example_thumb.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>If you are trying to visualize a nice graph with NetworkX, you should be exhausted by now. After all, NetworkX only provides basic functionality for graph visualization. The main goal of NetworkX is to enable graph analysis. For everything other than basic visualization, it’s advisable to use a separate specialized library. In my case, I choose Graphviz. It’s simplistic to get an attractive visualization of a NetworkX graph with Graphviz. I’m taking a gradual start, but you may skip to <strong>“NetworkX with Graphviz”</strong> directly.</p> <p><br/></p> <h3 id="networkx-with-matplotlib">NetworkX with Matplotlib</h3> <p>Let’s start small, so we can see the issue here. I’m trying to plot a simple directed graph (more like a tree).</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import networkx as nx
import matplotlib.pyplot as plt

G = nx.DiGraph()
G.add_edges_from([('A', 'B'), ('A', 'C'), ('A', 'D'), ('E', 'D'), ('D', 'F'), ('E', 'C'), ('E', 'G'), ('B', 'H'), ('H', 'F')])
pos = nx.spring_layout(G)
nx.draw_networkx(G, pos)
plt.show()
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/networkx-visualization-with-graphviz-example/NetworkX_visualization_with_Graphviz_Example_2-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/networkx-visualization-with-graphviz-example/NetworkX_visualization_with_Graphviz_Example_2-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/networkx-visualization-with-graphviz-example/NetworkX_visualization_with_Graphviz_Example_2-1400.webp"/> <img src="/assets/img/networkx-visualization-with-graphviz-example/NetworkX_visualization_with_Graphviz_Example_2.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>The main issue I had here was the layout. When the number of nodes increases, the layout becomes messy. And the none of the limited set of layouts seems to be working. So the first option is to use a graphviz layout without much change.</p> <p><br/></p> <h3 id="using-graphviz-layout-with-the-existing-plot">Using Graphviz layout with the existing plot</h3> <p>Here we are just trying to get a better layout without any change to the graph look and feel. Note that you need to install the Graphviz before going to next step. (download). With Windows, you can download the setup from the above page. For Ubuntu, you can easily install that with below command (Graphviz and some needed libraries)</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt-get install graphviz libgraphviz-dev pkg-config
</code></pre></div></div> <p>Then we use the Graphviz layout (I use the default one here) to generate the positions of the nodes. Here I have exported it as a png, rather than showing it.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pos = nx.nx_pydot.graphviz_layout(G)
nx.draw_networkx(G, pos)
plt.savefig('networkx_graph.png')
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/networkx-visualization-with-graphviz-example/NetworkX_visualization_with_Graphviz_Example_1-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/networkx-visualization-with-graphviz-example/NetworkX_visualization_with_Graphviz_Example_1-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/networkx-visualization-with-graphviz-example/NetworkX_visualization_with_Graphviz_Example_1-1400.webp"/> <img src="/assets/img/networkx-visualization-with-graphviz-example/NetworkX_visualization_with_Graphviz_Example_1.png" class="img-fluid rounded z-depth-2" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>As you can see the layout already looks better. However if you want to take the full advantage/power of Graphviz, you need to convert this to a Graphviz graph.</p> <p><br/></p> <h3 id="networkx-with-graphviz">NetworkX with Graphviz</h3> <p>We can directly convert to a Graphviz graph. First, install pygraphviz. Then run the code.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install pygraphviz
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A = nx.nx_agraph.to_agraph(G)
A.layout()
A.draw('networkx_graph.png')
</code></pre></div></div> <p>You can use an intermediate dot file, if you are working with 2 applications or if you want to store the graph structure.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nx.drawing.nx_pydot.write_dot(p_graph, 'networkx_graph.png')
gv.render('dot', 'png', 'networkx_graph.png')
</code></pre></div></div> <p>Both of these will generate the following graph. You can do any modification as you wish (Documentation).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/networkx-visualization-with-graphviz-example/NetworkX_visualization_with_Graphviz_Example_3-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/networkx-visualization-with-graphviz-example/NetworkX_visualization_with_Graphviz_Example_3-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/networkx-visualization-with-graphviz-example/NetworkX_visualization_with_Graphviz_Example_3-1400.webp"/> <img src="/assets/img/networkx-visualization-with-graphviz-example/NetworkX_visualization_with_Graphviz_Example_3.png" class="img-fluid rounded z-depth-3" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div>]]></content><author><name></name></author><category term="visualization"/><category term="graph"/><summary type="html"><![CDATA[NetworkX visualization with Graphviz (Example)]]></summary></entry><entry><title type="html">Index Physical Structure Example - Multi-column Non-Clustered Index with Includes</title><link href="https://malingaperera.github.io/index-physical-structure-example-multi-column-non-clustered-index-with-includes/" rel="alternate" type="text/html" title="Index Physical Structure Example - Multi-column Non-Clustered Index with Includes"/><published>2020-07-18T21:01:00+00:00</published><updated>2020-07-18T21:01:00+00:00</updated><id>https://malingaperera.github.io/index-physical-structure-example-multi-column-non-clustered-index-with-includes</id><content type="html" xml:base="https://malingaperera.github.io/index-physical-structure-example-multi-column-non-clustered-index-with-includes/"><![CDATA[<div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/physical_design_example_non_clustered_index_with_includes/physical_design_example_non_clustered_index_with_includes_1-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/physical_design_example_non_clustered_index_with_includes/physical_design_example_non_clustered_index_with_includes_1-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/physical_design_example_non_clustered_index_with_includes/physical_design_example_non_clustered_index_with_includes_1-1400.webp"/> <img src="/assets/img/physical_design_example_non_clustered_index_with_includes/physical_design_example_non_clustered_index_with_includes_1.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>This article demonstrates the physical design of a multi-column non-clustered index with include-columns. Many examples on the internet only demonstrate the most simple version of an index with a single column. This article gives a proper view of an index with multiple columns through a simple example. Furthermore, you can see how the include-columns are stored, only at the leaf level of the tree.</p> <p>Here we use a simple table ‘People’ with 6 columns (ID, First Name, Last Name, Age, Sex, Address). We assume we already have a clustered index created on the ID column (it will be almost no difference if there is no clustered index as well, explained at the end). Now we are going to create the non-clustered index as defined below.</p> <p><code> CREATE NONCLUSTERED INDEX IX_NAME ON People <br/> (FirstName, LastName)<br/> INCLUDE (Age, Sex)<br/> GO<br/> </code></p> <p>Below diagram shows the structure of this non-clustered index.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/physical_design_example_non_clustered_index_with_includes/physical_design_example_non_clustered_index_with_includes-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/physical_design_example_non_clustered_index_with_includes/physical_design_example_non_clustered_index_with_includes-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/physical_design_example_non_clustered_index_with_includes/physical_design_example_non_clustered_index_with_includes-1400.webp"/> <img src="/assets/img/physical_design_example_non_clustered_index_with_includes/physical_design_example_non_clustered_index_with_includes.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Index Physical Structure Example; Multi-column Non-Clustered Index with Includes. </div> <p>In the example above we are searching for the name <b>“Malinga Perera”</b>. In the root level (level 2; note that, the level number starts from leaves) <b>‘Malinga’</b> should come after <b>‘Kain’</b> and before <b>‘Ophelia’</b>. So we go to page 583. In level 1 we see that (Malinga) ‘Perera’ should come between (Malinga) <b>‘Amad’</b> and (Malinga) <b>‘Sonu’</b>. So we move to page 1024, which is a leaf node. In this leaf node, we find <b>‘Malinga Perera’</b>. I had to add a lot of ‘Malinga’s to get the last name into the example :D.</p> <p>In the leaf level, we see the additional columns we added as include-columns. Include-columns have a lesser overhead compared to the index-columns. However, if we need anything else, like address, we have to go to the actual table (clustered index). We got clustered index key 17 from this leaf node. This should lead us to the full data row directly (through the clustered index, to be specific). If we had this non-clustered index on a heap (i.e. no clustered index) then the pointer will give us the RID (row ID). RID directly give the physical address of the data (file:page:row).</p>]]></content><author><name></name></author><category term="database"/><category term="indices"/><category term="multi-column"/><category term="non-clustered"/><category term="database"/><category term="physical-design-structure"/><summary type="html"><![CDATA[Index Physical Structure Example; Multi-column Non-Clustered Index with Includes]]></summary></entry><entry><title type="html">Jaro–Winkler Similarity – How to correctly count the number of transpositions</title><link href="https://malingaperera.github.io/jaro-winkler-similarity-how-to-correctly-count-the-number-of-transpositions/" rel="alternate" type="text/html" title="Jaro–Winkler Similarity – How to correctly count the number of transpositions"/><published>2020-01-15T21:01:00+00:00</published><updated>2020-01-15T21:01:00+00:00</updated><id>https://malingaperera.github.io/jaro%E2%80%93winkler-similarity%E2%80%93how-to-correctly-count-the-number-of-transpositions</id><content type="html" xml:base="https://malingaperera.github.io/jaro-winkler-similarity-how-to-correctly-count-the-number-of-transpositions/"><![CDATA[<div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/jaro_winkler_distance/jaro_winkler_distance-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/jaro_winkler_distance/jaro_winkler_distance-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/jaro_winkler_distance/jaro_winkler_distance-1400.webp"/> <img src="/assets/img/jaro_winkler_distance/jaro_winkler_distance.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Jaro–Winkler Similarity is a widely used similarity measure for checking the similarity between two strings. Being a similarity measure (not a distance measure), a higher value means more similar strings. You can read on basics and how it works on Wikipedia. It’s available in many places and I’m not going into that. However, none of these sites talks about how to correctly count the number of transpositions in complex situations.</p> <p>Transposition is defined as “matches which are not in the same position”. For a simple example like <strong>‘cart’</strong> vs <strong>‘cratec’</strong> it is obvious with 4 matches and 2 transpositions (‘r’ and ‘a’ are in not in the same position). But for <strong>‘xabcdxxxxxx’</strong> vs <strong>‘yaybycydyyyyyy’</strong> in the first look, all letters seem to be out of position but there are <strong>no transpositions</strong> (4 matches). For very similar <strong>‘xabcdxxxxxx’</strong> vs <strong>‘ydyaybycyyyyyy’</strong>, there are <strong>4 transpositions</strong> (4 matches). With these examples, it might not be trivial to count the number of transpositions.</p> <p>The main reason behind this complexity is we are looking at the whole word whereas we should be looking only at the matched part.</p> <p>Ex: <strong>‘xabcdxxxxxx’, ‘yaybycydyyyyyy’</strong> (get the matching letters and write it down)</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'xabcdxxxxxx': abcd'
yaybycydyyyyyy': abcd
</code></pre></div></div> <p>Now it’s clear that there are no transpositions</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'xabcdxxxxxx': abcd
' ydyaybycyyyyyy': dabc
</code></pre></div></div> <p>After extracting the matching letters, you can see each letter can be given an index. In the first word a-0, b-1, c-2, d-4. In the second word d-0, a-1, b-2, c-3. What you must check is how many of the matches are not having the same index. In this case, none of the matching letters has the same index. So, there are 4 transpositions. Once you understand this, it’s very trivial.</p> <p>You can find code for Jaro-Winkler here: https://rosettacode.org/wiki/Jaro_distance. You can use it to check if your calculations are correct.</p>]]></content><author><name></name></author><category term="algorithms"/><category term="algorithms"/><summary type="html"><![CDATA[Jaro–Winkler Similarity – How to correctly count the number of transpositions]]></summary></entry><entry><title type="html">PostgreSQL – How to get the total index size used by each table in a database</title><link href="https://malingaperera.github.io/postgresql-how-to-get-the-total-index-size-used-by-each-table-in-a-database/" rel="alternate" type="text/html" title="PostgreSQL – How to get the total index size used by each table in a database"/><published>2020-01-15T21:01:00+00:00</published><updated>2020-01-15T21:01:00+00:00</updated><id>https://malingaperera.github.io/postgresql-how-to-get-the-total-index-size-used-by-each-table-in-a-database</id><content type="html" xml:base="https://malingaperera.github.io/postgresql-how-to-get-the-total-index-size-used-by-each-table-in-a-database/"><![CDATA[<div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/postgresql-how-to-get-the-total-index-size-used-by-each-table-in-a-database/postgresql-how-to-get-the-total-index-size-used-by-each-table-in-a-database-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/postgresql-how-to-get-the-total-index-size-used-by-each-table-in-a-database/postgresql-how-to-get-the-total-index-size-used-by-each-table-in-a-database-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/postgresql-how-to-get-the-total-index-size-used-by-each-table-in-a-database/postgresql-how-to-get-the-total-index-size-used-by-each-table-in-a-database-1400.webp"/> <img src="/assets/img/postgresql-how-to-get-the-total-index-size-used-by-each-table-in-a-database/postgresql-how-to-get-the-total-index-size-used-by-each-table-in-a-database.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>As per the documentation, To get the total size of all indexes attached to a table, you use the function. The pg_indexes_size() function accepts the OID or table name as the argument and returns the total disk space used by all indexes attached to that table.</p> <p>We will use this funcion to get the index sizes of each table in the database.</p> <p><code> select relname as table_name, <br/> pg_size_pretty(pg_indexes_size(relid)) as index_size <br/> from pg_catalog.pg_statio_user_tables; <br/> </code></p>]]></content><author><name></name></author><category term="database"/><category term="indices"/><category term="postgresql"/><summary type="html"><![CDATA[PostgreSQL – How to get the total index size used by each table in a database]]></summary></entry><entry><title type="html">Redis Sorted Object Set (Sorted Hashes)</title><link href="https://malingaperera.github.io/redis-sorted-object-set-sorted-hashes/" rel="alternate" type="text/html" title="Redis Sorted Object Set (Sorted Hashes)"/><published>2016-04-04T21:01:00+00:00</published><updated>2016-04-04T21:01:00+00:00</updated><id>https://malingaperera.github.io/redis-sorted-object-set-sorted-hashes</id><content type="html" xml:base="https://malingaperera.github.io/redis-sorted-object-set-sorted-hashes/"><![CDATA[<div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/redis-sorted-object-set-sorted-hashes/redis-sorted-object-set-sorted-hashes1-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/redis-sorted-object-set-sorted-hashes/redis-sorted-object-set-sorted-hashes1-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/redis-sorted-object-set-sorted-hashes/redis-sorted-object-set-sorted-hashes1-1400.webp"/> <img src="/assets/img/redis-sorted-object-set-sorted-hashes/redis-sorted-object-set-sorted-hashes1.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>We all know that the best way to store objects in Redis is through, Redis hashes. Redis sorted sets are used to keep a sorted set with a given score for each value. What if we need a sorted set of objects? What we need is a <strong>“Sorted set of Objects”</strong>, which Redis does not support by default. We came up with a hybrid, simple data structure that allows sorted objects using <strong>Redis Hashes</strong> and <strong>Redis Sorted sets</strong>.</p> <p><br/></p> <h3 id="use-of-redis-hashes">Use of Redis Hashes</h3> <p>Here we will keep an object as a Redis hash. Think of a simple object with several values as shown below.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>TICKET1 {     
    MERCHANT_ID: 0123456789,     
    TIME_STAMP: 00000000000,     
    SALE: 12.32 
}
</code></pre></div></div> <p>This will be saved in the Redis</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HMSET TICKET1 MERCHANT_ID "0123456789" TIME_STAMP "00000000000" SALE "12.32"
</code></pre></div></div> <p>When we need to edit an existing value and add a new value it can be done below</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Adding a new value
HSET TICKET1 DISCOUNT "0.60"
 
// Set Multiple Values
HMSET TICKET1 DISCOUNT "0.50" SALE "12.60"
 
// Set single Value
HSET TICKET1 SALE "12.50"
 
// RESULT
TICKET1 {
    MERCHANT_ID: 0123456789,
    TIME_STAMP: 00000000000,
    SALE: 12.50,
    DISCOUNT: 0.50
}
</code></pre></div></div> <p>Getting full map and some selected value</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Get the full object
HGETALL TICKET1

1) "MERCHANT_ID" 
2) "0123456789" 
3) "TIME_STAMP" 
4) "00000000000" 
...   

// Get set of selected subset of values 
HMGET TICKET1 MERCHANT_ID SALE   
1) "0123456789" 
2) "12.50"   

// get a single value 
HGET DISCOUNT   
1) "0.50"
</code></pre></div></div> <p>Whole map or items can be deleted</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Delete one field
HDEL TICKET1 SALE
 
// Delete whole object
DEL TICKET1
</code></pre></div></div> <p>There is some more commands in the Redis hash that can help us in this process</p> <table> <thead> <tr> <th>Command</th> <th>Action</th> </tr> </thead> <tbody> <tr> <td>HEXISTS</td> <td>Check for item</td> </tr> <tr> <td>HINCRBY</td> <td>Add to integer value</td> </tr> <tr> <td>HINCRBYFLOAT</td> <td>Add to float value</td> </tr> <tr> <td>HKEYS</td> <td>Return all keys</td> </tr> <tr> <td>HLEN</td> <td>Get number of items</td> </tr> <tr> <td>HSCAN</td> <td>Iterate items</td> </tr> <tr> <td>HSETNX</td> <td>Set item if doesn’t exist</td> </tr> <tr> <td>HVALS</td> <td>Return all values</td> </tr> </tbody> </table> <p><br/></p> <h3 id="use-of-redis-sorted-sets">Use of Redis Sorted Sets</h3> <p>As we said above we need to search with time values and in-order searches. This cannot be done alone by Redis hashes. Here we keep a list of all keys in the Redis hashes as a sorted set. This allow us to get all the maps that came after some time stamp. or between two time stamps. Other than that this allows us to search under topics (EX: get all TICKETS after 00000001 time stamp)</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ZADD TICKETS 1459746182 "TICKET1"
ZADD TICKETLINES 1459746192 "TICKETLINE1"
ZADD TICKETLINES 1459746222 "TICKETLINE2"
ZADD TICKETS 1459746282 "TICKET2"
ZADD TICKETS 1459746382 "TICKET3"
</code></pre></div></div> <p>Get items under one topic within a given time range</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ZRANGE TICKETS 1459746282 -1
1) "TICKET2"
2) "TICKET3"
</code></pre></div></div> <p>There is some more commands in the Redis hash that can help us in this process</p> <table> <thead> <tr> <th>Command</th> <th>Action</th> </tr> </thead> <tbody> <tr> <td>ZCARD</td> <td>Get number of items</td> </tr> <tr> <td>ZCOUNT</td> <td>Number of items within score range</td> </tr> <tr> <td>ZINCRBY</td> <td>Add to score</td> </tr> <tr> <td>ZLEXCOUNT</td> <td>Lexicographical range count</td> </tr> <tr> <td>ZRANGE</td> <td>Get items within rank range</td> </tr> <tr> <td>ZLEXRANGE</td> <td>Get items within lexicographical range</td> </tr> <tr> <td>ZRANGEBYSCORE</td> <td>Get items within score range</td> </tr> <tr> <td>ZRANK</td> <td>Get item rank</td> </tr> <tr> <td>ZREM</td> <td>Remove item(s)</td> </tr> <tr> <td>ZREMRANGEBYLEX</td> <td>Remove items within lexicographical range</td> </tr> <tr> <td>ZREMRANGEBYRANK</td> <td>Remove items within rank range</td> </tr> <tr> <td>ZREMRANGEBYSCORE</td> <td>Remove items within score range</td> </tr> <tr> <td>ZREVRANGE</td> <td>ZRANGE in reverse order</td> </tr> <tr> <td>ZREVRANGEBYSCORE</td> <td>ZRANGEBYSCORE in reverse order</td> </tr> <tr> <td>ZREVRANK</td> <td>ZRANK in reverse order</td> </tr> <tr> <td>ZSCAN</td> <td>Iterate items</td> </tr> <tr> <td>ZSCORE</td> <td>Get item score</td> </tr> <tr> <td>ZUNIONSTORE</td> <td>Store union</td> </tr> </tbody> </table>]]></content><author><name></name></author><category term="database"/><category term="redis"/><category term="cache"/><category term="key-value"/><summary type="html"><![CDATA[Redis Sorted Object Set (Sorted Hashes)]]></summary></entry><entry><title type="html">Reading and Understanding the Storm UI [Storm UI explained]</title><link href="https://malingaperera.github.io/reading-and-understanding-the-storm-ui-storm-ui-explained/" rel="alternate" type="text/html" title="Reading and Understanding the Storm UI [Storm UI explained]"/><published>2015-04-08T00:00:00+00:00</published><updated>2015-04-08T00:00:00+00:00</updated><id>https://malingaperera.github.io/reading-and-understanding-the-storm-ui-storm-ui-explained</id><content type="html" xml:base="https://malingaperera.github.io/reading-and-understanding-the-storm-ui-storm-ui-explained/"><![CDATA[<div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/images/Understanding-storm-UI-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/images/Understanding-storm-UI-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/images/Understanding-storm-UI-1400.webp"/> <img src="/assets/images/Understanding-storm-UI.jpg" class="img-fluid rounded z-depth-1 mx-auto d-block" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>I tried to find a document that explains every parameter in the storm UI, but I did not find any. So I thought of starting one of my own. I will start this with whatever information I have by now and will try to make it completes as possible. Thanks to all the forums and sites that help to find these information. Note that this is a live document and you can suggest edits though comments, as this is neither perfect nor complete.</p> <p>I will cover 4 major views that you can find in the storm UI and go through all the parameters in that view. This might lead to some repetitions, but I ignored that to keep this simple as possible. Before we start you need to know few basic terms. You might need to click and zoom the images as they are unreadable in the default zoom level.</p> <h2 id="basic-terms">Basic terms</h2> <ul> <li> <p>Tasks - A “task” is a single thread of execution for a bolt or spout in a topology. A topology executes as many worker processes across the cluster, and every spout and bolt executes as many threads. Each worker process contains within it some number of threads for some number of spouts and/or bolts. For instance, you may have 300 threads specified across all your components and 50 worker processes specified in your configuration. Each worker process will execute 6 threads, each of which of could belong to a different component. You tune the performance of Storm topologies by tweaking the parallelism for each component and the number of worker processes those threads should run.</p> </li> <li> <p>Latency - The latency there is intentional since the bolt is buffering tuples and batching writes to a database. The stat measures the time between a tuple being received and being marked as completed (acked), and that bolt acks the tuple only after it has been written to the db.</p> </li> <li> <p>Emitted - Emitted is the number of times one of the “emit” methods is called on the OutputCollector.</p> </li> <li> <p>Transferred - Transferred is the number of actual tuples sent to other tasks.</p> </li> </ul> <blockquote> <p>EX: If “bolt-B” has 5 tasks and subscribes to “bolt-A” using an “all” grouping, “transferred” will be 5x “emitted” for that stream of bolt A. Similarly, if bolt A emits a stream that no one subscribes to; “transferred” will be 0.</p> </blockquote> <p>In addition, I highly recommend that you go through following article that explains about the storm parallelism. Article can be found <a href="http://www.michael-noll.com/blog/2012/10/16/understanding-the-parallelism-of-a-storm-topology/">here</a> [<a href="http://www.michael-noll.com/blog/2012/10/16/understanding-the-parallelism-of-a-storm-topology/">http://www.michael-noll.com/blog/2012/10/16/understanding-the-parallelism-of-a-storm-topology/</a>]. This helped me a lot while learning storm concepts.</p> <h2 id="cluster-home---first-page-landing-page">Cluster Home - First Page [Landing page]</h2> <p>This is the landing page for storm. If you make a http GET though browser to the storm http port you will get this page. This gives you a summarized view of your cluster.</p> <h3 id="table-1---cluster-summary"> Table 1 - Cluster Summary</h3> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-cluster-summary-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-cluster-summary-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-cluster-summary-1400.webp"/> <img src="/assets/images/Reading-and-Understanding-the-Storm-UI-cluster-summary.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>Version – The version of storm installed on the UI node. [It is assumed that all nodes have the same storm version]</li> <li>Nimbus up-time - The duration the current Nimbus instance has been running. (Note that the storm cluster may have been deployed and available for a much longer period than the current Nimbus process has been running.). As nimbus act as the highest level coordinator in the storm cluster. Nimbus uptime simply shows the cluster uptime in most of the times. However thats not always true.</li> <li>Supervisors - The number of nodes in the cluster currently</li> <li>Total slots – Number of workers in the cluster [You have to define the number of slots per machine and its most of the time same as number of cores in the machine]</li> <li>Used slots – Number of workers that are occupied</li> <li>Free slots – Number of workers, which are free</li> <li>Tasks - A Task is an instance of a Bolt or Spout. If you sum the parallelism numbers of each spout and blot, you can find the number of tasks.</li> <li>Executors – Number of threads. These reside in the worker processes. You can define how many tasks are assigned to an executor. You need a good understanding about the storm parallelism to understand this number.</li> </ul> <h3 id="table-2---topology-summary">Table 2 - Topology Summary</h3> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Topology-summary-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Topology-summary-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Topology-summary-1400.webp"/> <img src="/assets/images/Reading-and-Understanding-the-Storm-UI-Topology-summary.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>Name - The name given to the topology by when it was submitted. You can click this name to view the Topology’s information. We will talk about the topology’s information below.</li> <li>Id - The unique ID given to a Topology each time it is launched.</li> <li>Status - The status can be one of ACTIVE, INACTIVE, KILLED, or REBALANCING.</li> <li>Uptime - The time since the Topology was submitted.</li> <li>Num workers – Number of workers used in the current topology. This is similar to what you have defined in topology configuration.</li> <li>Num executors - Number of executors used in the current topology [see above ‘Executors’ for more information]</li> <li>Num tasks - Number of tasks used in the current topology [see above ‘tasks’ for more information]</li> </ul> <h3 id="table-3--supervisor-summary">Table 3 -Supervisor Summary</h3> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Supervisor-Summary-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Supervisor-Summary-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Supervisor-Summary-1400.webp"/> <img src="/assets/images/Reading-and-Understanding-the-Storm-UI-Supervisor-Summary.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>Id - A unique identifier given to a Supervisor when it joins the cluster.</li> <li>Host - The hostname reported by the remote host. (Note that this hostname is not the result of a reverse look-up at the Nimbus node.)</li> <li>Up-time - The length of time a Supervisor has been registered to the cluster.</li> <li>Slots - Number of workers in the subject host. Normally storm evenly distributes the workers among all the hosts (nodes)</li> <li>Used slots - Number of workers that are occupied in the subject host</li> </ul> <h3 id="table-4---nimbus-configuration">Table 4 - Nimbus configuration</h3> <ul> <li>Here you can see the nimbus configuration for the cluster.</li> </ul> <h2 id="topology-home---second-page">Topology Home - Second page</h2> <p>This is the most important page for me, as I spend most of my time analyzing the numbers for performance tuning and understanding issues. Moreover, the most useful set of parameters comes under the bolts and spout sections of this page.</p> <h3 id="table-1---topology-summary-same-as-above">Table 1 - Topology Summary [same as above]</h3> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Topology-summary-page-2-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Topology-summary-page-2-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Topology-summary-page-2-1400.webp"/> <img src="/assets/images/Reading-and-Understanding-the-Storm-UI-Topology-summary-page-2.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>Name - The name given to the topology by when it was submitted. We will talk about the topology’s information below.</li> <li>Id - The unique ID given to a Topology each time it is launched.</li> <li>Status - The status can be one of ACTIVE, INACTIVE, KILLED, or REBALANCING.</li> <li>Uptime - The time since the Topology was submitted.</li> <li>Num workers – Number of workers used in the current topology</li> <li>Num executors - Number of executors used in the current topology [see above ‘Executors’ for more information]</li> <li>Num tasks - Number of tasks used in the current topology [see above ‘tasks’ for more information]</li> </ul> <h3 id="table-2---topology-actions">Table 2 - Topology actions</h3> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Topology-actions-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Topology-actions-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Topology-actions-1400.webp"/> <img src="/assets/images/Reading-and-Understanding-the-Storm-UI-Topology-actions.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>Activate - Returns a topology to active status after it has been deactivated.</li> <li>Deactivate - Sets the status of a topology to inactive. Topology up-time is not affected by deactivation.</li> <li>Re-balance - Dynamically increase or decrease the number of worker processes and/or executors. The administrator does not need to restart the cluster or the topology.</li> <li>Kill - Stops the topology and removes it from Apache Storm. The topology no longer appears in the Storm UI, and the administrator must deploy the application again to activate it.</li> </ul> <h3 id="table-3---topology-stats">Table 3 - Topology stats</h3> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Topology-stats-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Topology-stats-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Topology-stats-1400.webp"/> <img src="/assets/images/Reading-and-Understanding-the-Storm-UI-Topology-stats.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>Window - The past period of time for which the statistics apply. You can click on a value to set the window for this page.</li> <li>Emitted - The number of Tuples emitted.</li> <li>Transferred - The number of Tuples emitted that sent to one or more bolts.</li> </ul> <p>[If you have turned off the acking below 3 parameters will be 0 and will not be helpful]</p> <ul> <li>Complete latency - The average time a Tuple “tree” takes to be completely processed by the Topology. A value of 0 is expected if no acking is done.</li> <li>Acked - The number of Tuple “trees” successfully processed. A value of 0 is expected if no acking is done.</li> <li>Failed - The number of Tuple “trees” that were explicitly failed or timed out before acking was completed. A value of 0 is expected if no acking is done.</li> </ul> <h3 id="table-4---spouts-all-time">Table 4 - Spouts (All time)</h3> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Spouts-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Spouts-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Spouts-1400.webp"/> <img src="/assets/images/Reading-and-Understanding-the-Storm-UI-Spouts.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>Id - The ID assigned to a Component by the Topology. Click on the name to view the Component’s page.</li> <li>Executors – Number of executors assigned for spout.</li> <li>Tasks - Number of tasks assigned for spout. [Meaning of ‘Task’ can be found in the top]</li> <li>Emitted - The number of Tuples emitted. [Meaning of ‘Emitted’ can be found in the top]</li> <li>Transferred - The number of Tuples Transferred [Meaning of ‘Transferred’ can be found in the top]</li> </ul> <p>[If you have turned off the acking below 3 parameters will be 0 and will not be helpful]</p> <ul> <li>Complete latency - The average time a Tuple “tree” takes to be completely processed by the Topology. A value of 0 is expected if no acking is done.</li> <li>Acked - The number of Tuple “trees” successfully processed. A value of 0 is expected if no acking is done.</li> <li>Failed - The number of Tuple “trees” that were explicitly failed or timed out before acking was completed. A value of 0 is expected if no acking is done.</li> </ul> <h3 id="table-5---bolts-all-time">Table 5 - Bolts (All time)</h3> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Bolts-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Bolts-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Bolts-1400.webp"/> <img src="/assets/images/Reading-and-Understanding-the-Storm-UI-Bolts.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>Id - The ID assigned to a the Component by the Topology. Click on the name to view the Component’s page.</li> <li>Executors - Number of executors assigned for the bolt.</li> <li>Tasks - Number of tasks assigned for the bolt. [Meaning of ‘Task’ can be found in the top]</li> <li>Emitted - The number of Tuples emitted from this bolt. [Meaning of ‘Emitted’ can be found in the top]</li> <li>Transferred - The number of Tuples Transferred from this bolt. [Meaning of ‘Transferred’ can be found in the top]</li> <li>Capacity (last 10m) - If this is around 1.0, the corresponding Bolt is running as fast as it can, so you may want to increase the Bolt’s parallelism. This is (number executed * average execute latency) / measurement time.</li> <li>Execute latency - The average time a Tuple spends in the execute method. The execute method may complete without sending an Ack for the tuple.</li> <li>Executed - The number of incoming Tuples processed.</li> <li>Process latency - The average time it takes to Ack a Tuple after it is first received. Bolts that join, aggregate or batch may not Ack a tuple until a number of other Tuples have been received.</li> <li>Acked - The number of Tuples acknowledged by this Bolt.</li> <li>Failed - The number of tuples Failed by this Bolt.</li> </ul> <h3 id="table-6---topology-configuration">Table 6 - Topology configuration</h3> <ul> <li>Shows the topology configuration as a key value map</li> </ul> <h2 id="component-home--spout---third-page">Component Home – Spout - Third Page</h2> <p>There are some differences in the component information page for spout and bolt. However, most of the page is identical. Some of these parameters can only be found in the blot information page and ignore them if you are referring to a spout information page.</p> <h3 id="table-1---component-summary">Table 1 - Component Summary</h3> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Component-summary-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Component-summary-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Component-summary-1400.webp"/> <img src="/assets/images/Reading-and-Understanding-the-Storm-UI-Component-summary.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li> Id - The ID assigned to a the Component by the Topology.</li> <li>Topology - The name given to the topology by when it was submitted. Click the name to view the Topology’s information.</li> <li>Executors - Executors are threads in a Worker process.</li> <li>Tasks - A Task is an instance of a Bolt or Spout. The number of Tasks is almost always equal to the number of Executors.</li> </ul> <h3 id="table-2---spout-stats">Table 2 - Spout stats</h3> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Spout-Stats-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Spout-Stats-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Spout-Stats-1400.webp"/> <img src="/assets/images/Reading-and-Understanding-the-Storm-UI-Spout-Stats.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>Window - The past period of time for which the statistics apply. Click on a value to set the window for this page.</li> <li>Emitted - The number of Tuples emitted.</li> <li>Transferred - The number of Tuples emitted that sent to one or more bolts.</li> </ul> <p>[If you have turned off the acking below 3 parameters will be 0 and will not be helpful]</p> <ul> <li>Complete latency (ms) - The average time a Tuple “tree” takes to be completely processed by the Topology. A value of 0 is expected if no acking is done.</li> <li>Acked - The number of Tuple “trees” successfully processed. A value of 0 is expected if no acking is done.</li> <li>Failed - The number of Tuple “trees” that were explicitly failed or timed out before acking was completed. A value of 0 is expected if no acking is done.</li> </ul> <h3 id="table-3---output-stats-all-time">Table 3 - Output stats (All time)</h3> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-output-stats-bolt-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-output-stats-bolt-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-output-stats-bolt-1400.webp"/> <img src="/assets/images/Reading-and-Understanding-the-Storm-UI-output-stats-bolt.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>Stream - The name of the Tuple stream given in the Topolgy, or “default” if none was given.</li> <li>Emitted - The number of Tuples emitted.</li> <li>Transferred - The number of Tuples emitted that sent to one or more bolts.</li> </ul> <h3 id="table-4---executors">Table 4 - Executors</h3> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Executors-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Executors-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Executors-1400.webp"/> <img src="/assets/images/Reading-and-Understanding-the-Storm-UI-Executors.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>Id - The unique executor ID.</li> <li>Uptime - The length of time an Executor (thread) has been alive.</li> <li>Host - The hostname reported by the remote host. (Note that this hostname is not the result of a reverse lookup at the Nimbus node.)</li> <li>Port - The port number used by the Worker to which an Executor is assigned. Click on the port number to open the logviewer page for this Worker.</li> <li>Emitted - The number of Tuples emitted.</li> <li>Transferred - The number of Tuples emitted that sent to one or more bolts.</li> </ul> <p>[If you have turned off the acking below 3 parameters will be 0 and will not be helpful]</p> <ul> <li>Complete latency (ms) - The average time a Tuple “tree” takes to be completely processed by the Topology. A value of 0 is expected if no acking is done.</li> <li>Acked - The number of Tuple “trees” successfully processed. A value of 0 is expected if no acking is done.</li> <li>Failed - The number of Tuple “trees” that were explicitly failed or timed out before acking was completed. A value of 0 is expected if no acking is done.</li> </ul> <h2 id="component-home-page--bolt">Component Home page – Bolt</h2> <p>This is almost same as the above section. Therefor I will talk only about the additional columns.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-input-stats-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-input-stats-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-input-stats-1400.webp"/> <img src="/assets/images/Reading-and-Understanding-the-Storm-UI-input-stats.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>Component - The ID assigned to a the Component by the Topology.</li> <li>Stream - The name of the Tuple stream given in the Topolgy, or “default” if none was given.</li> <li>Execute latency (ms) - The average time a Tuple spends in the execute method. The execute method may complete without sending an Ack for the tuple.</li> <li>Executed - The number of incoming Tuples processed.</li> <li>Process latency (ms) - The average time it takes to Ack a Tuple after it is first received. Bolts that join, aggregate or batch may not Ack a tuple until a number of other Tuples have been received.</li> <li>Acked - The number of Tuples acknowledged by this Bolt.</li> <li>Failed - The number of tuples Failed by this Bolt.</li> </ul> <h3 id="table-2---output-stats-all-time">Table 2 - Output stats (All time)</h3> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-output-stats-spout-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-output-stats-spout-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-output-stats-spout-1400.webp"/> <img src="/assets/images/Reading-and-Understanding-the-Storm-UI-output-stats-spout.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>Stream - The name of the Tuple stream given in the Topolgy, or “default” if none was given.</li> <li>Emitted - The number of Tuples emitted.</li> <li>Transferred - The number of Tuples emitted that sent to one or more bolts.</li> </ul> <p>[If you have turned off the acking below 3 parameters will be 0 and will not be helpful]</p> <ul> <li>Complete latency (ms) - The average time a Tuple “tree” takes to be completely processed by the Topology. A value of 0 is expected if no acking is done.</li> <li>Acked - The number of Tuple “trees” successfully processed. A value of 0 is expected if no acking is done.</li> <li>Failed - The number of Tuple “trees” that were explicitly failed or timed out before acking was completed. A value of 0 is expected if no acking is done.</li> </ul> <h3 id="table-3---bolt-status">Table 3 - Bolt status</h3> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Bolt-stats-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Bolt-stats-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/images/Reading-and-Understanding-the-Storm-UI-Bolt-stats-1400.webp"/> <img src="/assets/images/Reading-and-Understanding-the-Storm-UI-Bolt-stats.png" class="img-fluid rounded z-depth-1 mx-auto d-block" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>Window - The past period of time for which the statistics apply. Click on a value to set the window for this page.</li> <li>Emitted - The number of Tuples emitted.</li> <li>Transferred - The number of Tuples emitted that sent to one or more bolts.</li> <li>Execute latency (ms) - The average time a Tuple spends in the execute method. The execute method may complete without sending an Ack for the tuple.</li> <li>Executed - The number of incoming Tuples processed</li> <li>Process latency (ms) - The average time it takes to Ack a Tuple after it is first received. Bolts that join, aggregate or batch may not Ack a tuple until a number of other Tuples have been received.</li> <li>Acked - The number of Tuples acknowledged by this Bolt.</li> <li>Failed - The number of tuples Failed by this Bolt.</li> </ul> <h3 id="table-4---executors-1">Table 4 - Executors</h3> <ul> <li>Id - The unique executor ID.</li> <li>Uptime - The length of time an Executor (thread) has been alive.</li> <li>Host - The hostname reported by the remote host. (Note that this hostname is not the result of a reverse lookup at the Nimbus node.)</li> <li>Port - The port number used by the Worker to which an Executor is assigned. Click on the port number to open the logviewer page for this Worker.</li> <li>Emitted - The number of Tuples emitted.</li> <li>Transferred - The number of Tuples emitted that sent to one or more bolts.</li> <li>Capacity (last 10m) - If this is around 1.0, the corresponding Bolt is running as fast as it can, so you may want to increase the Bolt’s parallelism. This is (number executed * average execute latency) / measurement time.</li> <li>Execute latency (ms) - The average time a Tuple spends in the execute method. The execute method may complete without sending an Ack for the tuple.</li> <li>Executed - The number of incoming Tuples processed.</li> <li>Process latency (ms) - The average time it takes to Ack a Tuple after it is first received. Bolts that join, aggregate or batch may not Ack a tuple until a number of other Tuples have been received.</li> <li>Acked - The number of Tuples acknowledged by this Bolt.</li> <li>Failed - The number of tuples Failed by this Bolt.</li> </ul> <h2 id="conclusion">Conclusion</h2> <p>Remember this only give a simple description on all the parameters. Most of the description are taken though the storm UI itself. This does not talk about how to analyze the parameters and how to use them to identify the issues. This aspect of the storm UI will be covered in the next article on the storm UI. There I will talk about the common issues that can be identify using the storm UI.</p>]]></content><author><name></name></author><category term="other"/><category term="life"/><category term="other"/><summary type="html"><![CDATA[Reading and Understanding the Storm UI [Storm UI explained]]]></summary></entry></feed>